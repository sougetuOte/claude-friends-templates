# pyproject.toml - Python project configuration
# This file defines the project metadata, build system, and tool configurations

[build-system]
# Build system configuration
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
# Project metadata
name = "claude-friends-templates"
version = "2.0.0"
description = "AI-powered multi-agent development system with Planner and Builder agents"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "sougetuOte", email = "dev@claude-friends-templates.local"}
]
keywords = [
    "ai",
    "multi-agent",
    "claude",
    "development",
    "automation",
    "tdd",
    "quality"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Quality Assurance",
]

[project.urls]
Homepage = "https://github.com/sougetuOte/claude-friends-templates"
Documentation = "https://github.com/sougetuOte/claude-friends-templates#readme"
Repository = "https://github.com/sougetuOte/claude-friends-templates.git"
Issues = "https://github.com/sougetuOte/claude-friends-templates/issues"
Discussions = "https://github.com/sougetuOte/claude-friends-templates/discussions"

# Optional dependencies for different use cases
[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.13.0",
    "mypy>=1.18.0",
    "bandit>=1.7.0",
    "radon>=6.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
]
quality = [
    "ruff>=0.13.0",
    "mypy>=1.18.0",
    "bandit>=1.7.0",
    "radon>=6.0.0",
]

# Ruff configuration - Fast Python linter and formatter
[tool.ruff]
# Target Python 3.12+
target-version = "py312"

# Line length (compatible with Black default)
line-length = 88

# Exclude directories from linting
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "htmlcov",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Ignore specific rules
ignore = [
    "E501",  # Line too long (handled by formatter)
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces for indentation
indent-style = "space"

# MyPy configuration - Static type checker
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
# Test discovery patterns
testpaths = ["tests", ".claude/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-v",                    # Verbose output
    "--strict-markers",      # Strict marker usage
    "--tb=short",           # Short traceback format
    "--color=yes",          # Colored output
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
]

# Coverage configuration
[tool.coverage.run]
source = [".claude/scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
# Fail if coverage is below threshold
fail_under = 90.0

# Show missing lines
show_missing = true

# Precision for coverage percentage
precision = 2

# Exclude lines from coverage
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"
