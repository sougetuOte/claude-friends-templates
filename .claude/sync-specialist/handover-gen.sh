#!/bin/bash

# Sync Specialist - Handover Generator
# Purpose: エージェント切り替え時のhandoverドキュメントを自動生成
# Version: 1.0.0
# Pattern-2-1 Enhanced Hybrid Implementation

# ============================
# Configuration
# ============================
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
HANDOVER_DIR="$PROJECT_ROOT/.claude/shared/handover"
AI_LOG="$HOME/.claude/ai-activity.jsonl"
LOG_DIR="$HOME/.claude/logs"
LOG_FILE="$LOG_DIR/handover-gen.log"

# Agent workspace paths
PLANNER_DIR="$PROJECT_ROOT/.claude/planner"
BUILDER_DIR="$PROJECT_ROOT/.claude/builder"
SHARED_DIR="$PROJECT_ROOT/.claude/shared"

# Ensure directories exist
mkdir -p "$LOG_DIR"
mkdir -p "$HANDOVER_DIR"

# ============================
# Parameters
# ============================
FROM_AGENT=${1:-"unknown"}
TO_AGENT=${2:-"unknown"}
TIMESTAMP=${3:-$(date '+%Y%m%d-%H%M%S')}

# ============================
# Logging Functions
# ============================
log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1" >> "$LOG_FILE"
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$LOG_FILE"
}

# ============================
# Data Collection Functions
# ============================
get_recent_activities() {
    # Extract recent activities from AI log (last 50 entries)
    if [ -f "$AI_LOG" ]; then
        tail -50 "$AI_LOG" 2>/dev/null | \
        jq -r 'select(.operation.type != null) | 
               "\(.timestamp) - \(.operation.type): \(.operation.command // .operation.files[0].path // "N/A")"' \
        2>/dev/null || echo "活動ログの取得に失敗しました"
    else
        echo "活動ログが見つかりません"
    fi
}

get_agent_notes() {
    local agent=$1
    local notes_file=""
    
    case "$agent" in
        "planner")
            notes_file="$PLANNER_DIR/notes.md"
            ;;
        "builder")
            notes_file="$BUILDER_DIR/notes.md"
            ;;
        *)
            echo "エージェントノートなし"
            return
            ;;
    esac
    
    if [ -f "$notes_file" ]; then
        # Extract recent notes (last 30 lines)
        echo "=== 最近のノート ==="
        tail -30 "$notes_file" 2>/dev/null || echo "ノートの読み取りに失敗しました"
    else
        echo "ノートファイルが見つかりません"
    fi
}

get_phase_todo_status() {
    local phase_todo="$SHARED_DIR/phase-todo.md"
    
    if [ -f "$phase_todo" ]; then
        echo "=== Phase/ToDo状況 ==="
        # Extract current phase and pending todos
        grep -E "^##|^- \[[ x]\]" "$phase_todo" 2>/dev/null | head -20 || echo "Phase/ToDo情報なし"
    else
        echo "Phase/ToDoファイルが見つかりません"
    fi
}

get_git_status() {
    if command -v git >/dev/null 2>&1 && [ -d "$PROJECT_ROOT/.git" ]; then
        echo "=== Git状況 ==="
        cd "$PROJECT_ROOT" && git status --short 2>/dev/null || echo "Git状態の取得に失敗"
        cd - >/dev/null
    else
        echo "Gitリポジトリではありません"
    fi
}

# ============================
# Handover Generation
# ============================
generate_handover_content() {
    cat << EOF
# 自動生成ハンドオーバー - $TIMESTAMP

## エージェント切り替え情報
- **From**: $FROM_AGENT
- **To**: $TO_AGENT
- **切り替え時刻**: $(date '+%Y-%m-%d %H:%M:%S')
- **生成者**: Sync Specialist (Pattern-2-1)

## 現在の作業状況

### 最近の活動
\`\`\`
$(get_recent_activities | head -10)
\`\`\`

### Phase/ToDo状況
$(get_phase_todo_status)

### 前エージェントのノート
$(get_agent_notes "$FROM_AGENT")

## 技術的コンテキスト

### Git状況
\`\`\`
$(get_git_status)
\`\`\`

### 作業ディレクトリ
- **プロジェクトルート**: $PROJECT_ROOT
- **現在のディレクトリ**: $(pwd)

## 推奨事項

### ${TO_AGENT}への推奨アクション
EOF

    # Agent-specific recommendations
    case "$TO_AGENT" in
        "planner")
            cat << EOF
1. 現在の実装状況を確認し、次のPhase計画を立案
2. 技術的な課題がある場合は、解決策を検討
3. Phase/ToDoの更新と優先順位の見直し
EOF
            ;;
        "builder")
            cat << EOF
1. Plannerの計画に基づいて実装を継続
2. 未完了のToDoから優先度の高いものを選択
3. テストを書いてから実装（TDD遵守）
EOF
            ;;
        *)
            cat << EOF
1. 現在の状況を確認
2. 適切なエージェントモードを選択
3. 作業を継続
EOF
            ;;
    esac

    cat << EOF

## 注意事項
- このハンドオーバーは自動生成されたものです
- 詳細な引き継ぎが必要な場合は、手動でhandover.mdを作成してください
- 重要な決定事項がある場合は、必ず記録を残してください

---
*Generated by Sync Specialist - Pattern 2-1 Enhanced Hybrid*
EOF
}

# ============================
# Main Function
# ============================
main() {
    log_info "Handover generation started: $FROM_AGENT -> $TO_AGENT"
    
    # Generate handover filename
    local handover_file="$HANDOVER_DIR/handover-$TIMESTAMP.md"
    local latest_link="$HANDOVER_DIR/latest.md"
    
    # Generate and save handover content
    generate_handover_content > "$handover_file"
    
    if [ $? -eq 0 ]; then
        log_info "Handover generated: $handover_file"
        
        # Create/update symbolic link to latest
        ln -sf "$(basename "$handover_file")" "$latest_link"
        log_info "Updated latest link: $latest_link"
        
        # Clean up old handovers (keep last 10)
        cd "$HANDOVER_DIR"
        ls -t handover-*.md 2>/dev/null | tail -n +11 | xargs -r rm -f
        cd - >/dev/null
        
        log_info "Handover generation completed successfully"
    else
        log_error "Failed to generate handover"
        exit 1
    fi
}

# Execute if run directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi