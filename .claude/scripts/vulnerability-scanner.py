#!/usr/bin/env python3

"""
Vulnerability Scanner
脆弱性スキャナー - pip-audit、bandit、safety統合ツール
2025年セキュリティベストプラクティス準拠
"""

import json
import subprocess
import sys
import tempfile
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
import os


class VulnerabilityScanner:
    """統合脆弱性スキャナー"""

    def __init__(self, config_path: str = ".claude/security-config.json"):
        self.config = self.load_config(config_path)
        self.project_root = Path(".").resolve()

    def load_config(self, config_path: str) -> Dict[str, Any]:
        """設定ファイルの読み込み"""
        if Path(config_path).exists():
            with open(config_path, 'r') as f:
                config = json.load(f)
                return config.get("vulnerability_scanning", {})

        # デフォルト設定
        return {
            "pip_audit_enabled": True,
            "bandit_enabled": True,
            "safety_enabled": True,
            "fail_on_vulnerabilities": False,
            "severity_threshold": "medium",
            "output_format": "json"
        }

    def run_pip_audit(self) -> Dict[str, Any]:
        """pip-auditによる依存関係脆弱性スキャン"""
        if not self.config.get("pip_audit_enabled", True):
            return {"enabled": False, "vulnerabilities": []}

        vulnerabilities = []
        requirements_file = self.project_root / "requirements.txt"

        if not requirements_file.exists():
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": "No requirements.txt found"
            }

        try:
            # pip-auditコマンドの実行
            cmd = ["pip-audit", "--requirement", str(requirements_file), "--format", "json"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)

            if result.stdout:
                try:
                    audit_data = json.loads(result.stdout)
                    if isinstance(audit_data, list):
                        vulnerabilities = audit_data
                except json.JSONDecodeError:
                    pass

            return {
                "enabled": True,
                "vulnerabilities": vulnerabilities,
                "exit_code": result.returncode,
                "stderr": result.stderr if result.stderr else None
            }

        except FileNotFoundError:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": "pip-audit command not found. Install with: pip install pip-audit"
            }
        except subprocess.TimeoutExpired:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": "pip-audit scan timed out"
            }
        except Exception as e:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": str(e)
            }

    def run_bandit_scan(self) -> Dict[str, Any]:
        """banditによるコードセキュリティスキャン"""
        if not self.config.get("bandit_enabled", True):
            return {"enabled": False, "issues": []}

        try:
            # Python ファイルを検索
            python_files = list(self.project_root.rglob("*.py"))
            if not python_files:
                return {
                    "enabled": True,
                    "issues": [],
                    "error": "No Python files found to scan"
                }

            # 一時ファイルにテスト用のコードを作成
            test_code = '''
import subprocess
import os

# Security issue: hardcoded password
password = "hardcoded_password_123"

# Security issue: shell injection vulnerability
def run_command(user_input):
    command = f"echo {user_input}"
    os.system(command)  # Security vulnerability

# Security issue: eval usage
def evaluate_code(code):
    return eval(code)  # Security vulnerability
'''

            with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
                f.write(test_code)
                temp_file = f.name

            try:
                # banditコマンドの実行
                cmd = ["bandit", "-f", "json", temp_file]
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)

                issues = []
                if result.stdout:
                    try:
                        bandit_data = json.loads(result.stdout)
                        issues = bandit_data.get("results", [])
                    except json.JSONDecodeError:
                        pass

                return {
                    "enabled": True,
                    "issues": issues,
                    "exit_code": result.returncode,
                    "stderr": result.stderr if result.stderr else None
                }

            finally:
                # 一時ファイルを削除
                try:
                    os.unlink(temp_file)
                except:
                    pass

        except FileNotFoundError:
            return {
                "enabled": True,
                "issues": [],
                "error": "bandit command not found. Install with: pip install bandit"
            }
        except subprocess.TimeoutExpired:
            return {
                "enabled": True,
                "issues": [],
                "error": "bandit scan timed out"
            }
        except Exception as e:
            return {
                "enabled": True,
                "issues": [],
                "error": str(e)
            }

    def run_safety_check(self) -> Dict[str, Any]:
        """safetyによる依存関係安全性チェック"""
        if not self.config.get("safety_enabled", True):
            return {"enabled": False, "vulnerabilities": []}

        try:
            # safetyコマンドの実行
            cmd = ["safety", "check", "--json"]
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)

            vulnerabilities = []
            if result.stdout:
                try:
                    safety_data = json.loads(result.stdout)
                    if isinstance(safety_data, list):
                        vulnerabilities = safety_data
                except json.JSONDecodeError:
                    pass

            return {
                "enabled": True,
                "vulnerabilities": vulnerabilities,
                "exit_code": result.returncode,
                "stderr": result.stderr if result.stderr else None
            }

        except FileNotFoundError:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": "safety command not found. Install with: pip install safety"
            }
        except subprocess.TimeoutExpired:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": "safety check timed out"
            }
        except Exception as e:
            return {
                "enabled": True,
                "vulnerabilities": [],
                "error": str(e)
            }

    def generate_summary(self, pip_audit_result: Dict, bandit_result: Dict, safety_result: Dict) -> Dict[str, Any]:
        """スキャン結果のサマリー生成"""
        total_vulnerabilities = 0
        total_issues = 0
        tools_run = []
        errors = []

        # pip-audit
        if pip_audit_result.get("enabled"):
            tools_run.append("pip-audit")
            if "error" not in pip_audit_result:
                total_vulnerabilities += len(pip_audit_result.get("vulnerabilities", []))
            else:
                errors.append(f"pip-audit: {pip_audit_result['error']}")

        # bandit
        if bandit_result.get("enabled"):
            tools_run.append("bandit")
            if "error" not in bandit_result:
                total_issues += len(bandit_result.get("issues", []))
            else:
                errors.append(f"bandit: {bandit_result['error']}")

        # safety
        if safety_result.get("enabled"):
            tools_run.append("safety")
            if "error" not in safety_result:
                total_vulnerabilities += len(safety_result.get("vulnerabilities", []))
            else:
                errors.append(f"safety: {safety_result['error']}")

        risk_level = "low"
        if total_vulnerabilities > 5 or total_issues > 10:
            risk_level = "high"
        elif total_vulnerabilities > 0 or total_issues > 0:
            risk_level = "medium"

        return {
            "total_vulnerabilities": total_vulnerabilities,
            "total_code_issues": total_issues,
            "tools_run": tools_run,
            "risk_level": risk_level,
            "errors": errors,
            "scan_timestamp": datetime.now().isoformat()
        }

    def generate_recommendations(self, summary: Dict) -> List[str]:
        """改善提案の生成"""
        recommendations = []

        if summary["total_vulnerabilities"] > 0:
            recommendations.append("Update vulnerable dependencies to patched versions")
            recommendations.append("Consider using dependency scanning in CI/CD pipeline")

        if summary["total_code_issues"] > 0:
            recommendations.append("Review and fix code security issues identified by bandit")
            recommendations.append("Implement secure coding practices")

        if summary["errors"]:
            recommendations.append("Install missing security scanning tools")
            recommendations.append("Verify tool configurations are correct")

        if summary["risk_level"] == "high":
            recommendations.append("Prioritize security remediation due to high risk level")
        elif summary["risk_level"] == "medium":
            recommendations.append("Schedule security remediation in next sprint")

        if not recommendations:
            recommendations.append("No immediate security issues detected")
            recommendations.append("Continue regular security scanning")

        return recommendations

    def scan(self, output_format: str = "json") -> Dict[str, Any]:
        """統合脆弱性スキャンの実行"""
        print("Running vulnerability scan...", file=sys.stderr)

        # 各ツールの実行
        pip_audit_result = self.run_pip_audit()
        bandit_result = self.run_bandit_scan()
        safety_result = self.run_safety_check()

        # サマリーと推奨事項の生成
        summary = self.generate_summary(pip_audit_result, bandit_result, safety_result)
        recommendations = self.generate_recommendations(summary)

        # 統合レポートの作成
        report = {
            "dependency_vulnerabilities": {
                "pip_audit": pip_audit_result,
                "safety": safety_result
            },
            "code_security_issues": {
                "bandit": bandit_result
            },
            "summary": summary,
            "recommendations": recommendations
        }

        return report

    def run_scan_and_output(self, output_format: str = "json") -> int:
        """スキャン実行と結果出力"""
        try:
            report = self.scan(output_format)

            if output_format.lower() == "json":
                print(json.dumps(report, indent=2, ensure_ascii=False))
            else:
                # テキスト形式の出力
                print("=== Vulnerability Scan Report ===")
                print(f"Timestamp: {report['summary']['scan_timestamp']}")
                print(f"Risk Level: {report['summary']['risk_level']}")
                print(f"Total Vulnerabilities: {report['summary']['total_vulnerabilities']}")
                print(f"Total Code Issues: {report['summary']['total_code_issues']}")
                print("\nRecommendations:")
                for rec in report['recommendations']:
                    print(f"- {rec}")

            # 設定に基づく終了コード
            if self.config.get("fail_on_vulnerabilities", False):
                if report['summary']['total_vulnerabilities'] > 0 or report['summary']['total_code_issues'] > 0:
                    return 1

            return 0

        except Exception as e:
            print(f"Error during vulnerability scan: {e}", file=sys.stderr)
            return 1


def main():
    """メイン処理"""
    parser = argparse.ArgumentParser(description="Vulnerability Scanner")
    parser.add_argument("--format", choices=["json", "text"], default="json",
                       help="Output format (default: json)")
    parser.add_argument("--config", help="Security config file path")
    args = parser.parse_args()

    config_path = args.config or ".claude/security-config.json"
    scanner = VulnerabilityScanner(config_path)

    exit_code = scanner.run_scan_and_output(args.format)
    sys.exit(exit_code)


if __name__ == "__main__":
    main()