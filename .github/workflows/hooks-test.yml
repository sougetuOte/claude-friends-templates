# Hooks System Test Pipeline
# Enhanced t-wada TDD compatible CI/CD pipeline

name: Hooks System Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '.claude/scripts/**'
      - '.claude/hooks/**'
      - '.claude/tests/**'
      - '.claude/settings.json'
      - '.github/workflows/hooks-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.claude/scripts/**'
      - '.claude/hooks/**'
      - '.claude/tests/**'
      - '.claude/settings.json'
  workflow_dispatch:  # Manual trigger

env:
  CLAUDE_CACHE: "./.ccache"
  CLAUDE_PROJECT_DIR: "${{ github.workspace }}"

jobs:
  # ==============================================================================
  # Phase 1: Static Analysis & Security Checks
  # ==============================================================================
  static-analysis:
    name: Static Analysis & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bats
      uses: mig4/setup-bats@v1
      with:
        bats-version: 1.12.0

    - name: Install shellcheck
      run: |
        curl -fsSL https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -xJ -C /tmp
        sudo cp /tmp/shellcheck-stable/shellcheck /usr/local/bin/

    - name: Install kcov for coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y kcov

    - name: Run ShellCheck on all scripts
      run: |
        echo "=== ShellCheck Analysis ==="
        find .claude/scripts -name "*.sh" -type f | while read -r script; do
          echo "Checking: $script"
          shellcheck -f gcc -e SC2034 "$script" || exit 1
        done

    - name: Security baseline check
      run: |
        echo "=== Security Baseline ==="
        chmod +x .claude/scripts/test-security.sh
        .claude/scripts/test-security.sh

    - name: Check for hardcoded secrets
      run: |
        echo "=== Secret Detection ==="
        ! grep -r -E "(password|secret|token|api[_-]key)\s*=\s*['\"]" .claude/ --exclude-dir=logs || {
          echo "⚠️ Potential hardcoded secrets found!"
          exit 1
        }

    - name: Verify file permissions
      run: |
        echo "=== File Permissions Check ==="
        find .claude/scripts -name "*.sh" -type f | while read -r script; do
          perms=$(stat -c %a "$script")
          if ! echo "$perms" | grep -E '^[67][45][45]$'; then
            echo "❌ Incorrect permissions for $script: $perms"
            exit 1
          fi
        done
        echo "✅ All scripts have correct permissions"

  # ==============================================================================
  # Phase 2: Unit Tests (Bash Scripts with Bats)
  # ==============================================================================
  bash-unit-tests:
    name: Bash Unit Tests (Bats)
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bats
      uses: mig4/setup-bats@v1
      with:
        bats-version: 1.12.0

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq kcov curl

    - name: Setup test environment
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        mkdir -p .claude/tests/fixtures
        mkdir -p .claude/tests/mocks
        mkdir -p .claude/tests/helpers
        mkdir -p .claude/tests/bats

    - name: Create test data and mocks
      run: |
        # Create minimal test data as specified in task requirements
        cat > .claude/tests/fixtures/test-prompt.json << 'EOF'
        {"prompt": "/agent:planner test command", "tool": "Edit", "file_paths": ["test.md"]}
        EOF

        cat > .claude/tests/mocks/mock-claude-env.sh << 'EOF'
        #!/bin/bash
        # Mock Claude Code environment variables
        export CLAUDE_TOOL_NAME="Edit"
        export CLAUDE_FILE_PATHS="test.md"
        export CLAUDE_EXIT_CODE="0"
        export CLAUDE_PROJECT_DIR="$(pwd)"
        EOF
        chmod +x .claude/tests/mocks/mock-claude-env.sh

    - name: Run Bats unit tests with coverage
      run: |
        echo "=== Running Bats Unit Tests ==="

        # Create a basic test file first (TDD Red Phase requirement)
        cat > .claude/tests/bats/test_hook_common.bats << 'EOF'
        #!/usr/bin/env bats

        setup() {
          export TEST_DIR="$(mktemp -d)"
          export CLAUDE_PROJECT_DIR="$TEST_DIR"
          source .claude/tests/mocks/mock-claude-env.sh
        }

        teardown() {
          rm -rf "$TEST_DIR"
        }

        @test "security script blocks dangerous commands" {
          run .claude/scripts/deny-check.sh "rm -rf /"
          [ "$status" -ne 0 ]
        }

        @test "security script allows safe commands" {
          run .claude/scripts/deny-check.sh "ls -la"
          [ "$status" -eq 0 ]
        }

        @test "activity logger handles valid input" {
          echo '{"tool": "Edit", "file": "test.md"}' | run .claude/scripts/activity-logger.sh
          [ "$status" -eq 0 ]
        }
        EOF

        # Run the tests
        bats --tap .claude/tests/bats/test_hook_common.bats

    - name: Upload Bats test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bats-test-results
        path: |
          .claude/tests/bats/
          .claude/logs/

  # ==============================================================================
  # Phase 3: Python Tests
  # ==============================================================================
  python-tests:
    name: Python Tests (pytest)
    runs-on: ubuntu-latest
    needs: static-analysis
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock

    - name: Run Python tests with coverage
      run: |
        echo "=== Running Python Tests ==="

        # Create test directory structure
        mkdir -p .claude/tests/python

        # Create a basic test file (TDD approach)
        cat > .claude/tests/python/test_analysis_tools.py << 'EOF'
        import pytest
        import subprocess
        import os
        import sys

        # Add the scripts directory to Python path
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../scripts'))

        def test_analyze_ai_logs_script_exists():
            """Test that the AI logs analyzer script exists and is executable"""
            script_path = ".claude/scripts/analyze-ai-logs.py"
            assert os.path.exists(script_path), f"Script {script_path} does not exist"
            assert os.access(script_path, os.X_OK), f"Script {script_path} is not executable"

        def test_security_audit_script_exists():
            """Test that the security audit script exists"""
            script_path = ".claude/scripts/security-audit.py"
            assert os.path.exists(script_path), f"Script {script_path} does not exist"

        def test_quality_check_script_runs():
            """Test that quality check script can be invoked"""
            result = subprocess.run(
                ["python3", ".claude/scripts/quality-check.py", "--help"],
                capture_output=True,
                text=True
            )
            # Should either show help or indicate script is working
            assert result.returncode in [0, 1], "Quality check script failed to run"
        EOF

        # Run pytest with coverage
        python -m pytest .claude/tests/python/ -v --cov=.claude/scripts --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload Python coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python-tests
        name: python-coverage

    - name: Upload Python test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: python-test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          .coverage

  # ==============================================================================
  # Phase 4: Integration Tests
  # ==============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [bash-unit-tests, python-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup complete test environment
      run: |
        # Install all dependencies
        sudo apt-get update
        sudo apt-get install -y jq curl

        # Setup Bats
        git clone https://github.com/bats-core/bats-core.git /tmp/bats-core
        cd /tmp/bats-core && sudo ./install.sh /usr/local

        # Setup ShellCheck
        curl -fsSL https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz | tar -xJ -C /tmp
        sudo cp /tmp/shellcheck-stable/shellcheck /usr/local/bin/

    - name: Run end-to-end hook integration tests
      run: |
        echo "=== Integration Test: Full Hook Pipeline ==="

        # Test the complete hook pipeline
        export CLAUDE_TOOL_NAME="Edit"
        export CLAUDE_FILE_PATHS="integration-test.md"
        export CLAUDE_EXIT_CODE="0"

        # Create test file
        echo "# Integration Test" > integration-test.md

        # Test security hook (should pass)
        echo "Testing security hook with safe command..."
        .claude/scripts/deny-check.sh "ls -la" || {
          echo "❌ Security hook failed on safe command"
          exit 1
        }

        # Test activity logger
        echo "Testing activity logger..."
        echo '{"tool": "Edit", "file_paths": ["integration-test.md"]}' | .claude/scripts/activity-logger.sh || {
          echo "❌ Activity logger failed"
          exit 1
        }

        # Test AI logger
        echo "Testing AI logger..."
        echo '{"tool": "Edit", "file_paths": ["integration-test.md"]}' | .claude/scripts/ai-logger.sh || {
          echo "❌ AI logger failed"
          exit 1
        }

        echo "✅ All integration tests passed"

    - name: Verify hook configuration
      run: |
        echo "=== Hook Configuration Verification ==="

        # Verify settings.json is valid JSON
        jq . .claude/settings.json > /dev/null || {
          echo "❌ settings.json is not valid JSON"
          exit 1
        }

        # Verify all hook scripts exist and are executable
        jq -r '.hooks | to_entries[] | .value[] | .hooks[]? | .command' .claude/settings.json | while read -r hook_command; do
          if [[ -n "$hook_command" && "$hook_command" != "null" ]]; then
            if [[ ! -x "$hook_command" ]]; then
              echo "❌ Hook script not executable: $hook_command"
              exit 1
            fi
            echo "✅ Hook script verified: $hook_command"
          fi
        done

    - name: Performance baseline test
      run: |
        echo "=== Performance Baseline Test ==="

        # Test that hooks execute within acceptable time limits
        start_time=$(date +%s.%N)
        echo '{"tool": "Edit", "file_paths": ["perf-test.md"]}' | timeout 5s .claude/scripts/activity-logger.sh
        end_time=$(date +%s.%N)
        duration=$(echo "$end_time - $start_time" | bc -l)

        echo "Hook execution time: ${duration}s"
        if (( $(echo "$duration > 1.0" | bc -l) )); then
          echo "⚠️ Hook execution slower than expected (${duration}s > 1.0s)"
          # Don't fail, just warn for now
        else
          echo "✅ Hook execution time within acceptable range"
        fi

  # ==============================================================================
  # Phase 5: Test Results & Reporting
  # ==============================================================================
  test-summary:
    name: Test Summary & Reporting
    runs-on: ubuntu-latest
    needs: [static-analysis, bash-unit-tests, python-tests, integration-tests]
    if: always()

    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# 🧪 Hooks System Test Results" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Execution Summary" >> test-summary.md
        echo "" >> test-summary.md

        # Check job statuses
        if [[ "${{ needs.static-analysis.result }}" == "success" ]]; then
          echo "✅ Static Analysis & Security: PASSED" >> test-summary.md
        else
          echo "❌ Static Analysis & Security: FAILED" >> test-summary.md
        fi

        if [[ "${{ needs.bash-unit-tests.result }}" == "success" ]]; then
          echo "✅ Bash Unit Tests (Bats): PASSED" >> test-summary.md
        else
          echo "❌ Bash Unit Tests (Bats): FAILED" >> test-summary.md
        fi

        if [[ "${{ needs.python-tests.result }}" == "success" ]]; then
          echo "✅ Python Tests (pytest): PASSED" >> test-summary.md
        else
          echo "❌ Python Tests (pytest): FAILED" >> test-summary.md
        fi

        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Integration Tests: PASSED" >> test-summary.md
        else
          echo "❌ Integration Tests: FAILED" >> test-summary.md
        fi

        echo "" >> test-summary.md
        echo "## Coverage Information" >> test-summary.md
        echo "- Bash script coverage: Generated with kcov" >> test-summary.md
        echo "- Python script coverage: Generated with pytest-cov" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Next Steps" >> test-summary.md
        echo "- Review any failed tests above" >> test-summary.md
        echo "- Check test artifacts for detailed logs" >> test-summary.md
        echo "- Ensure all TDD Red-Green-Refactor cycles are complete" >> test-summary.md

        cat test-summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Upload final test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

# ==============================================================================
# Notification & Status Updates
# ==============================================================================
  notify-completion:
    name: Notify Test Completion
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()

    steps:
    - name: Test completion notification
      run: |
        echo "🎯 Hooks System Test Pipeline Completed"
        echo "Timestamp: $(date -Iseconds)"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

        if [[ "${{ needs.test-summary.result }}" == "success" ]]; then
          echo "✅ All tests completed successfully"
          echo "Ready for t-wada TDD cycle progression"
        else
          echo "❌ Some tests failed - review required"
          echo "Block progression until issues resolved"
        fi